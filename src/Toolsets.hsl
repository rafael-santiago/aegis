#
# Copyright (c) 2020, Rafael Santiago
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.
#

include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/clang/clang-lib.hsl
include ~/toolsets/clang/clang-app.hsl

include ~/toolsets/common/utils/lang/c/dependency_scanner.hsl

include ~/fsutil.hsl

function get_toolset() : result type string {
    var option type list;
    $option = hefesto.sys.get_option("toolset");
    if ($option.count() > 0) {
        result $option.item(0);
    }
    if (has_gcc()) {
        result "gcc";
    }
    if (has_clang()) {
        result "clang";
    }
    hefesto.sys.echo("ERROR: You need to have GCC or Clang well-installed in your system. Aborted.\n");
    hefesto.project.abort(1);
    result "";
}

function get_lib_toolset() : result type string {
    result (get_toolset() + "-c-lib");
}

function get_app_toolset() : result type string {
    result (get_toolset() + "-c-app");
}

local function has_gcc() : result type int {
    var cmdline type string;
    if (hefesto.sys.os_name() != "windows") {
        $cmdline = "gcc --version > /dev/null 2>&1";
    } else {
        $cmdline = "gcc --version > nul 2>&1";
    }
    result (hefesto.sys.run($cmdline) == 0);
}

local function has_clang() : result type int {
    var cmdline type string;
    if (hefesto.sys.os_name() != "windows") {
        $cmdline = "clang --version > /dev/null 2>&1";
    } else {
        $cmdline = "clang --version > nul 2>&1";
    }
    result (hefesto.sys.run($cmdline) == 0);
}

function build(libname type string) : result type none {
    var func_addr type int;
    $func_addr = hefesto.sys.get_func_addr("build_" + $libname);
    if ($func_addr == 0) {
        hefesto.sys.echo("ERROR: No support for " + $libname + " build.\n");
        hefesto.project.abort(1);
    }
    hefesto.sys.call_func_addr($func_addr);
}

local function build_cutest() : result type none {
    if (isfile("cutest/src/lib/libcutest.a") == 0) {
        var oldcwd type string;
        $oldcwd = hefesto.sys.pwd();
        if (hefesto.sys.cd("cutest/src") != 1) {
            hefesto.sys.echo("ERROR: Unable to find libcutest's submodule.\n");
            hefesto.project.abort(1);
        }
        if (hefesto.sys.run("hefesto") != 0) {
            hefesto.project.abort(1);
        }
        hefesto.sys.cd($oldcwd);
    }
}

local function build_samples() : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("../samples") != 1) {
        hefesto.sys.echo("ERROR: Unable to find samples's sub-directory.\n");
        hefesto.project.abort(1);
    }
    if (hefesto.sys.run("hefesto") != 0) {
        hefesto.project.abort(1);
    }
    hefesto.sys.cd($oldcwd);
}

local function build_test() : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();
    if (hefesto.sys.cd("test") != 1) {
        hefesto.sys.echo("ERROR: Unable to find test's sub-directory.\n");
        hefesto.project.abort(1);
    }
    if (hefesto.sys.run("hefesto") != 0) {
        hefesto.sys.echo("___________\nBUILD ERROR\n");
        hefesto.project.abort(1);
    }
    hefesto.sys.cd($oldcwd);
}

local function build_dist() : result type none {
    if (has_zip() == 0) {
        if (hefesto.sys.os_name() != "windows") {
            hefesto.sys.echo("ERROR: Unable to make Aegis' distribution package. Your system does not have zip tool.\n");
        } else {
            hefesto.sys.echo("ERROR: Unable to make Aegis' distribution package. Your system does not have 7z tool.\n");
        }
        hefesto.project.abort(1);
    }

    if (isfile("../lib/libaegis.a") == 0) {
        if (hefesto.sys.run("hefesto") != 0) {
            hefesto.sys.echo("ERROR: Unable to make Aegis' distribution package. This is not compiling on your system!\n");
            hefesto.project.abort(1);
        }
    }

    var headers type list;
    $headers.ls(".*\\.h$");

    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    hefesto.sys.cd("..");

    if (isdir("include") == 1) {
        var old_headers type list;
        hefesto.sys.cd("include");
        $old_headers.ls(".*\\.h$");
        var o type int;
        $o = 0;
        while ($o < $old_headers.count()) {
            hefesto.sys.rm($old_headers.item($o));
            $o = $o + 1;
        }
        hefesto.sys.cd("..");
    } else {
        hefesto.sys.mkdir("include");
    }

    var h type int;
    $h = 0;
    while ($h < $headers.count()) {
        var curr_header_path type string;
        $curr_header_path = $headers.item($h);
        hefesto.sys.cp($curr_header_path, "include/" + filenamefrompath($curr_header_path));
        $h = $h + 1;
    }

    var distpkg_error type int;
    var distpkg_name_path type string;
    $distpkg_name_path = "lib/libaegis-" + hefesto.sys.os_name() + ".zip";

    $distpkg_error = mkdist($distpkg_name_path);

    hefesto.sys.cd("include");
    $o = 0;
    $old_headers.clear();
    $old_headers.ls(".*\\.h$");
    while ($o < $old_headers.count()) {
        hefesto.sys.rm($old_headers.item($o));
        $o = $o + 1;
    }
    hefesto.sys.cd("..");
    hefesto.sys.rmdir("include");

    if ($distpkg_error == 0) {
        hefesto.sys.echo("INFO: Distribution package successfuly built on '" + $distpkg_name_path + "'.\n");
    } else {
        hefesto.sys.echo("ERROR: Unable to make distribution package.\n");
    }

    hefesto.sys.cd($oldcwd);

    hefesto.project.abort($distpkg_error);
}

local function has_zip() : result type int {
    var exit_code type int;
    if (hefesto.sys.os_name() != "windows") {
        $exit_code = hefesto.sys.run("zip --version > /dev/null 2>&1");
    } else {
        $exit_code = hefesto.sys.run("7z.exe > nul 2>&1");
    }
    result ($exit_code == 0);
}

local function mkdist(distpkg_name_path type string) : result type int {
    hefesto.sys.rm($distpkg_name_path);
    var zip_command type string;
    if (hefesto.sys.os_name() != "windows") {
        $zip_command = "zip " + $distpkg_name_path + " lib/*.a include/*.h > /dev/null 2>&1";
    } else {
        $zip_command = "7z.exe a -tzip " + $distpkg_name_path + " lib\\*.a include\\*.h > nul 2>&1";
    }
    result hefesto.sys.run($zip_command);
}

local function get_tag_version(default type string) : result type string {
    var exit_code type int;
    $exit_code = hefesto.sys.run("git describe --tags --abbrev=0 > .curr-tag 2>&1");
    var tag type string;
    if ($exit_code != 0) {
        var curr_tag type list;
        $curr_tag = hefesto.sys.lines_from_file(".curr-tag", ".*");
        $tag = $curr_tag.item(0);
        if ($tag.match("^v") == 0) {
            $tag = $default;
            hefesto.sys.echo("WARN: Unable to detect what tag your repo copy is currently on. Assuming " + $default + ".\n");
        }
    } else {
        $tag = $default;
        hefesto.sys.echo("WARN: Unable to detect what tag your repo copy is currently on. Assuming " + $default + ".\n");
    }
    hefesto.sys.rm(".curr-tag");
    result $tag;
}

local function go_build(output type string) : result type int {
    var cmdline type string;
    $cmdline = "go build -a";
    if ($output.len() > 1) {
        $cmdline = $cmdline + " -o " + $output;
    }
    result hefesto.sys.run($cmdline);
}

local function go_test() : result type int {
    result hefesto.sys.run("go test");
}

local function go_build_sample(subdir type string) : result type int {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd($subdir) != 1) {
        hefesto.sys.echo("ERROR: Unable to find '" + $subdir + "'.\n");
        result 1;
    }

    var target type string;
    $target = "../../../samples/golang-" + filenamefrompath($subdir);
    if (hefesto.sys.os_name() == "windows") {
        $target = $target + ".exe";
    }

    var exit_code type int;
    hefesto.sys.echo("INFO: Now building '" + $subdir + "'. Wait...\n");
    $exit_code = go_build($target);

    if ($exit_code == 0) {
        hefesto.sys.echo("INFO: Done.\n");
    } else {
        hefesto.sys.echo("ERROR: Unable to build '" + $subdir + "'.\n");
    }

    hefesto.sys.cd($oldcwd);

    result $exit_code;
}

local function build_gopkg() : result type none {
    var oldcwd type string;
    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("../gopkg") != 1) {
        hefesto.sys.echo("ERROR: Unable to find gopkg directory.\n");
        hefesto.project.abort(1);
    }

    var exit_code type int;
    $exit_code = 1;

    var current_version type string;
    $current_version = get_tag_version("v1");

    var samples_subdir type list;
    $samples_subdir.add_item("samples/wait4debug");
    $samples_subdir.add_item("samples/setgorgon");

    if (hefesto.sys.cd($current_version) == 1) {
        hefesto.sys.echo("INFO: Now building 'gopkg/" + $current_version + "'. Wait...\n");
        $exit_code = go_build("");
        if ($exit_code == 0) {
            hefesto.sys.echo("INFO: Done.\n");
            hefesto.sys.cd("..");
            var s type int;
            $s = 0;
            while ($s < $samples_subdir.count() && $exit_code == 0) {
                var curr_sample_location type string;
                $curr_sample_location = $samples_subdir.item($s);
                $exit_code = go_build_sample($curr_sample_location);
                $s = $s + 1;
            }
            if ($exit_code == 0) {
                if (hefesto.sys.cd($current_version) == 1) {
                    hefesto.sys.echo("INFO: Now testing 'gopkg/" + $current_version + "'. Wait...\n");
                    $exit_code = go_test();
                    if ($exit_code != 0) {
                        hefesto.sys.echo("BUILD ERROR: 'gopkg/" + $current_version + "' tests has broken.\n");
                    } else {
                        hefesto.sys.echo("INFO: Done.\n");
                    }
                } else {
                    $exit_code = 1;
                    hefesto.sys.echo("ERROR: Unable to run 'gopkg/" + $current_version + "' tests.\n");
                }
            }
        } else {
            hefesto.sys.echo("ERROR: Unable to build 'gopkg/" + $current_version + "'.\n");
        }
    } else {
        hefesto.sys.echo("ERROR: Unable to find 'gopkg/" + $current_version + "'.\n");
    }

    if ($exit_code == 0) {
        hefesto.sys.echo("____\nINFO: Nice. All your Aegis golang samples were succesfully built on '../samples'.\n" +
                         "      They are prepended with 'golang-'. Happy hacking! ;)\n");
    }

    hefesto.sys.cd($oldcwd);
    hefesto.project.abort($exit_code);
}
